// 原始
function data1() {
	var data = new Array();
	for (var i = 0; i < 20; i++) {
		data[i] = {};
		data[i].type = "stackedArea";
		data[i].dataPoints = new Array(20);
	}
	for (var i = 0; i < jsonData.length; i++) {
		for (var j = 0; j < jsonData[i].length; j++) {
			data[i].dataPoints[j] = {
				x : j,
				y : jsonData[i][j]
			};
		}
	}
	return data;
}

// TDMA解对三角矩阵
// n为对三角矩阵维数
function tdma(a, b, c, d, n) {
	var x = new Array();
	c[0] = c[0] / b[0];
	d[0] = d[0] / b[0];
	for (var i = 1; i < n; i++) {
		m = (b[i] - a[i] * c[i - 1]);
		c[i] = c[i] / m;
		d[i] = (d[i] - a[i] * d[i - 1]) / m;
	}
	x[n - 1] = d[n - 1];
	// 逆向代入
	for (var i = n - 2; i >= 0; i--) {
		x[i] = d[i] - c[i] * x[i + 1];
	}
	return x;
}

// 平滑
function data2() {
	// 采用三次样条的方式进行平滑，输入数据依旧是jsonData,对每个序列分别进行处理和差值。
	// S_i = a_i+b_i(x)+c_i(x^2)+d_i(x^3),i = 0,1,...,59
	// 同时，有20个序列，因此采用4个二维数组来存储这四个参数，数组维数是20（个序列）*60(段)
	// 同时，记二阶导为m，有20*61段,采用自由边界(中间59加前后2个)，即m_0=m_60 = 0
	var div = 20;// 每个区间间隔为十个。
	var a = new Array();
	var b = new Array();
	var c = new Array();
	var d = new Array();
	var m = new Array();

	// 其次计算a,b,c,d
	for (var i = 0; i < 20; i++) {
		m[i] = new Array();
		a[i] = new Array();
		b[i] = new Array();
		c[i] = new Array();
		d[i] = new Array();
		var y = jsonData[i];
		// 首先计算m
		m[i][0] = m[i][60] = 0;
		// 注意，下面的ABCD均只用于计算对三角矩阵，与样条参数无关
		var A = new Array();
		var B = new Array();
		var C = new Array();
		var D = new Array();
		// 初始化参数ABCDX
		for (var k = 1; k < 60; k++) {
			A[k] = 1;
			B[k] = 4;
			C[k] = 1;
		}
		B[0] = B[60] = 1;
		A[0] = C[0] = A[60] = C[60] = 0;
		for (var k = 1; k < 59; k++) {
			D[k] = 6 * (y[k + 1] - 2 * y[k] + y[k - 1])
		}
		D[0] = D[59] = 0;

		m[i] = tdma(A, B, C, D, 60);
		for (var j = 0; j < 59; j++) {
			a[i][j] = y[j];
			b[i][j] = y[j + 1] - y[j] - m[i][j] / 2 - (m[i][j + 1] - m[i][j])
					/ 6;
			c[i][j] = m[i][j] / 2;
			d[i][j] = (m[i][j + 1] - m[i][j]) / 6;
		}
	}
	// 产生数据
	var data = new Array();
	for (var i = 0; i < 20; i++) {
		data[i] = {};
		data[i].type = "stackedArea";
		data[i].dataPoints = new Array(20);
		for (var j = 0; j < jsonData[i].length - 1; j++) {
			for (var k = 0; k < div; k++) {
				var px = j + k / div;
				var py = a[i][j] + b[i][j] * (k / div) + c[i][j]
						* ((k / div) * (k / div)) + d[i][j] * (k / div)
						* (k / div) * (k / div);

				// 三次样条有可能出现插入负值，将其过滤掉
				if (py < 0) {
					py = 0;
				}
				data[i].dataPoints[j * div + k] = {
					x : px,
					y : py
				};
			}
		}
		data[i].dataPoints[j * div - 1] = {
			x : j - 1,
			y : jsonData[i][j - 1]
		};

	}
	return data;
}

// 平滑+优化1
function data3() {
	var data = data2();
	var base = {};
	base.type = "stackedArea";
	base.dataPoints = new Array();
	data.splice(0, 0, base);
	for (var j = 0; j < data[1].dataPoints.length; j++) {
		data[0].dataPoints[j] = {
			x : data[1].dataPoints[j].x + 0,
			y : 0
		};
		for (var k = 1; k < data.length; k++) {
			data[0].dataPoints[j].y -= (0.5) * data[k].dataPoints[j].y;
		}
	}
	return data;
}

// 平滑+优化2
function data4() {
	var data = data2();
	var base = {};
	base.type = "stackedArea";
	base.dataPoints = new Array();
	data.splice(0, 0, base);
	for (var j = 0; j < data[1].dataPoints.length; j++) {
		data[0].dataPoints[j] = {
			x : data[1].dataPoints[j].x + 0,
			y : 0
		};
		for (var i = 0; i < data.length; i++) {
			for (var k = 1; k < i; k++) {
				data[0].dataPoints[j].y += data[k].dataPoints[j].y;
			}
		}
		data[0].dataPoints[j].y /=(-data.length);
	}
	return data;
}
// 平滑+优化3
function data5() {

}

// 平滑+次序调整
function data6() {
	// 首先按照非零开始从早到晚排序，取前7个放在第7-13位，其余的分别放在0-6和14-20位这样子，在data2的基础上进行
	var data = data2();
	var first = new Array();
	for(var i = 0; i < data.length; i++){
		first[i] = [i,data[i].dataPoints.length-1];//设置为最后一个
		for(var j = 0; j < data[i].dataPoints.length; j++){
			if(data[i].dataPoints[j] != 0){
				first[i] = new Array(i,j);
				break;
			}
		}
	}
	// 对first进行冒泡排序
	for(var i=0; i < first.length; i++){
		for(var j=i; j < first.length; j++){
			if(first[j+1][1] < first[j][1]){
				var temp = first[j];
				first[j] = first[j+1];
				first[j+1] = temp;
			}
		}
	}
	var result = new Array();
	for(var i=0; i < first.length; i++){
		result[i] = data[first[i][0]];
	}
	return result;
	
}
// 平滑+斜率优化
function data7() {

}
window.onload = function() {
	var chart1 = new CanvasJS.Chart("chart1", {
		colorSet : 'colorSet1',
		title : {
			text : "原始"
		},
		data : data1()
	});
	chart1.render();
	var chart2 = new CanvasJS.Chart("chart2", {
		colorSet : 'colorSet1',
		title : {
			text : "三次样条平滑"
		},
		data : data2()
	});
	chart2.render();

	var chart3 = new CanvasJS.Chart("chart3", {
		colorSet : 'colorSet1',
		title : {
			text : "平滑+优化1"
		},
		data : data3()
	});
	chart3.render();
	
	 var chart4 = new CanvasJS.Chart("chart4", {
	 colorSet : 'colorSet1',
	 title : {
	 text : "平滑+优化2"
	 },
	 data : data4()
	 });
	 chart4.render();
		
	 var chart5 = new CanvasJS.Chart("chart5", {
	 colorSet : 'colorSet1',
	 title : {
	 text : "平滑+优化3"
	 },
	 data : data4()
	 });
	 chart5.render();
		
	 var chart6 = new CanvasJS.Chart("chart6", {
	 colorSet : 'colorSet1',
	 title : {
	 text : "平滑+次序调整"
	 },
	 data : data6()
	 });
	 chart6.render();
	//	
	// var chart7 = new CanvasJS.Chart("chart7", {
	// colorSet : 'colorSet1',
	// title : {
	// text : "平滑+二阶导平滑"
	// },
	// data : data7()
	// });
	// chart7.render();
}